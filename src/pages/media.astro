---
import { getCollection } from "astro:content";
import Background from "../components/background.astro";
import Footer from "../components/footer.astro";
import Title from "../components/title.astro";
import Layout from "../layouts/layout.astro";
import type { ImageMetadata } from "astro";
import { format } from "date-fns";
import { Picture } from "astro:assets";

const data = await getCollection("events");

async function getImages(date: string) {
  let images = import.meta.glob<{ default: ImageMetadata }>(
    "/src/content/**/*.{jpeg,jpg}"
  );

  images = Object.fromEntries(
    Object.entries(images).filter(([key]) => key.includes(date))
  );

  const resolvedImages = await Promise.all(
    Object.values(images).map((image) => image().then((m) => m.default))
  );

  return resolvedImages;
}

const events = await Promise.all(
  data.map(async (event) => {
    const images = await getImages(event.data.date);

    return {
      ...event.data,
      photos: event.data.photos.map((photo) => ({
        ...photo,
        image: images.find((image) => image.src.includes(photo.fileName)),
      })),
    };
  })
);
---

<Layout>
  <header
    class="relative grid place-items-center border-b pt-10 pb-20 text-center"
  >
    <Background />

    <a href="/"><Title /></a>

    <p class="faq-header tilt-left">Media</p>
  </header>

  <main
    class="mx-auto grid w-full max-w-7xl place-items-center px-5 pt-20 pb-20 text-center"
  >
    <div class="space-y-10 sm:space-y-25">
      {
        events.map((event, index) => (
          <article class="space-y-10">
            <div class="flex flex-col items-center">
              <h3
                class:list={[
                  "faq-header inline-block",
                  {
                    "tilt-right": index % 2 === 0,
                    "tilt-left": index % 2 === 1,
                  },
                ]}
              >
                {format(event.date, "MMMM do, yyyy")}
              </h3>

              <p
                class:list={[
                  "faq-header inline-block",
                  {
                    "tilt-right": index % 2 === 1,
                    "tilt-left": index % 2 === 0,
                  },
                ]}
              >
                {`at ${event.location}`}
              </p>
            </div>

            <div class="grid gap-5 md:grid-cols-2 lg:grid-cols-4">
              {event.photos
                .filter((photo) => !!photo.image)
                .map((photo, index) => (
                  <Picture
                    alt={photo.alt}
                    class:list={[
                      "rounded-sm md:aspect-[4/3] md:object-cover",
                      {
                        "md:rotate-1": index % 2 === 1,
                        "md:-rotate-3": index % 2 === 0,
                      },
                    ]}
                    formats={["avif", "webp"]}
                    loading="lazy"
                    quality="high"
                    src={photo.image as ImageMetadata}
                  />
                ))}
            </div>
          </article>
        ))
      }
    </div>
  </main>
</Layout>

<Footer />
