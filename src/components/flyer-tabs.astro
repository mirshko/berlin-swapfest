---
import { format } from "date-fns";
import { EVENT_DATE } from "../constants/date";
import * as LOCATION from "../constants/location";

const TAB_DATE = `${format(EVENT_DATE, "MMM do")} @ ${LOCATION.NAME}`;
---

<div class="tabs">
  {
    Array.from({ length: 9 }).map((_, index) => (
      <div class="tab" data-breakpoint-md={index >= 5} data-tab-button>
        <span class="tab-inner">
          <span class="tab-text">
            <span>BERLIN SWAPFEST</span>
            <span>{TAB_DATE}</span>
          </span>
        </span>
      </div>
    ))
  }

  <svg
    class="absolute inset-0 -z-1 w-full object-contain select-none"
    fill="none"
    height="66"
    viewBox="0 0 1901 66"
    width="1901"
    xmlns="http://www.w3.org/2000/svg"
  >
    <g clip-path="url(#clip)">
      <path
        d="M0 36.9502L3.054 36.3392C5.51 35.8482 6.671 36.2692 8.989 38.4892C11.111 40.5222 12.497 41.0922 14.251 40.6522C15.68 40.2932 17.534 40.6862 18.887 41.6332C20.597 42.8312 22.411 43.0542 26.392 42.5572C31.643 41.9012 35.18 42.8902 55 50.5582C56.925 51.3032 61.027 51.9322 64.115 51.9562C68.079 51.9872 70.445 52.5622 72.16 53.9112C73.496 54.9622 77.454 57.5012 80.956 59.5542C86.82 62.9902 87.581 63.1922 90.587 62.1052C92.382 61.4562 94.987 61.2102 96.376 61.5582C98.134 61.9992 100.964 61.2082 105.7 58.9522C110.813 56.5152 113.885 55.7062 118.085 55.6892C122.772 55.6702 123.816 55.3322 124.585 53.5832C125.391 51.7492 126.397 51.4912 133 51.4282C137.125 51.3882 141.647 50.8712 143.049 50.2792C144.451 49.6872 148.726 48.9152 152.549 48.5632C156.372 48.2122 161.215 47.4102 163.31 46.7822C166.433 45.8462 167.606 45.9192 169.81 47.1842C171.29 48.0332 173.85 49.0492 175.5 49.4422C177.15 49.8352 179.175 50.7522 180 51.4812C181.905 53.1632 191.466 56.0002 195.229 56.0002C197.115 56.0002 198.907 55.0592 200.467 53.2502C202.735 50.6202 203.268 50.4942 212.669 50.3562C218.076 50.2762 225.778 49.9992 229.785 49.7392C235.612 49.3622 237.514 49.6072 239.285 50.9642C243.014 53.8192 244.669 53.9652 250.415 51.9452C253.459 50.8752 258.132 50.0002 260.799 50.0002C263.466 50.0002 270.339 49.2832 276.074 48.4072C283.03 47.3442 290.386 46.9622 298.177 47.2612C304.6 47.5072 310.309 47.4272 310.865 47.0842C311.42 46.7402 312.338 45.2422 312.903 43.7552C314.351 39.9472 325.879 34.6992 330.778 35.6182C333.403 36.1112 335.596 35.6052 340.033 33.4842L345.848 30.7052L351.174 34.1882C354.103 36.1042 357.016 37.9682 357.646 38.3312C358.276 38.6932 360.023 38.3512 361.528 37.5702C363.404 36.5972 365.003 36.4312 366.611 37.0422C372.017 39.0982 382.12 37.6802 388.836 33.9252C391.221 32.5912 394.596 30.7132 396.336 29.7522C401.161 27.0852 408.157 27.5852 419.999 31.4402C429.649 34.5832 430.64 34.7312 432.253 33.2712C433.803 31.8682 436.306 31.7872 453.754 32.5702C464.614 33.0582 479.161 33.3262 486.079 33.1672C494.857 32.9652 500.693 33.3492 505.391 34.4392C509.094 35.2972 514.867 36.0002 518.22 36.0002C525.9 36.0002 545.609 39.6972 549.24 41.8192C551.582 43.1872 552.65 43.2412 556.582 42.1892C560.685 41.0922 561.832 41.1962 567.194 43.1512C573.007 45.2712 573.315 45.2852 576.457 43.5932C578.911 42.2722 581.889 41.8672 588.604 41.9432C593.497 41.9982 606.5 42.0522 617.5 42.0642C631.712 42.0792 639.133 42.5062 643.144 43.5422C646.249 44.3442 652.399 45.0002 656.811 45.0002C662.671 45.0002 666.121 45.5512 669.605 47.0452C672.228 48.1692 676.302 49.3542 678.656 49.6762C682.656 50.2252 683.153 50.0192 686.219 46.5362C689.976 42.2682 693.786 40.1352 705.102 35.9622C712.889 33.0912 713.685 33.0002 730.929 33.0002C748.334 33.0002 748.802 32.9452 752.465 30.4602C754.86 28.8342 759.079 27.4182 764.18 26.5272C771.652 25.2232 772.44 25.2592 776.762 27.1122C780.292 28.6262 781.973 28.8582 783.936 28.1062C785.346 27.5662 790.883 26.9632 796.24 26.7662C804.109 26.4772 806.228 26.0702 807.267 24.6492C808.695 22.6972 814.532 21.0602 820.198 21.0242C822.744 21.0072 824.746 20.2132 826.621 18.4762C829.924 15.4142 830.957 15.1732 843 14.6562C857.735 14.0232 878.253 12.0142 880.797 10.9562C884.017 9.61622 903.284 9.76121 906.685 11.1502C908.233 11.7822 914.45 12.6562 920.5 13.0912C937.464 14.3102 945.369 15.6952 949.593 18.1882C952.859 20.1142 955.444 20.5622 966.475 21.1102C976.739 21.6212 980.56 22.2262 984.5 23.9662C988.371 25.6762 990.889 26.0892 995.654 25.7962C1001.05 25.4642 1002.18 25.0232 1004.8 22.2092C1007.52 19.2972 1008.35 19.0002 1013.71 19.0002C1017.36 19.0002 1020.36 19.5622 1021.56 20.4682C1022.65 21.2912 1025.7 21.9502 1028.51 21.9682C1031.26 21.9862 1035.04 22.4382 1036.9 22.9722C1039.41 23.6902 1041.5 23.5542 1044.9 22.4522C1049 21.1222 1050.1 21.1272 1055 22.4942C1067.8 26.0672 1071.55 26.4442 1076.28 24.6382C1078.71 23.7092 1082.52 21.3942 1084.74 19.4932C1090.22 14.8042 1092.77 14.0042 1102.31 13.9782C1108.3 13.9622 1111.67 13.4242 1114.86 11.9762C1120.54 9.39921 1129.9 6.99421 1134.14 7.02221C1135.99 7.03421 1139.53 7.97021 1142 9.10121C1146.86 11.3232 1153.28 12.6862 1164.84 13.9502C1171.47 14.6742 1172.6 14.5302 1176.34 12.4752C1182.17 9.28022 1186.46 8.59021 1191.59 10.0252C1195.11 11.0102 1196.59 10.9972 1199.1 9.96021C1204.12 7.88021 1210.22 8.35722 1215.13 11.2112C1217.53 12.6112 1222.8 14.9382 1226.82 16.3832C1233.48 18.7732 1234.34 18.8742 1236.3 17.5052C1238.85 15.7182 1244.26 15.5422 1247.32 17.1472C1248.52 17.7772 1250.98 19.5772 1252.79 21.1472C1254.59 22.7162 1256.62 24.0032 1257.29 24.0062C1257.95 24.0102 1260.9 26.2282 1263.84 28.9372C1272.95 37.3272 1273.72 37.5292 1295.5 37.3002C1309.85 37.1492 1314.99 37.4242 1316.52 38.4242C1320.25 40.8652 1326.74 41.3532 1330.67 39.4872C1335.02 37.4232 1340.46 38.0542 1346.05 41.2682C1349.57 43.2962 1350.16 43.3632 1353.19 42.0712C1355.01 41.2962 1358.08 40.7792 1360 40.9222C1365.14 41.3042 1371.32 41.2632 1382.07 40.7762C1390.96 40.3742 1392.36 40.0052 1401.81 35.5902L1411.98 30.8362L1417.99 32.9182C1421.3 34.0632 1424.79 35.0092 1425.75 35.0212C1426.71 35.0332 1430.65 36.1562 1434.5 37.5172C1438.35 38.8782 1442.45 39.9932 1443.61 39.9962C1444.77 39.9982 1448.37 41.3842 1451.61 43.0762C1456.13 45.4352 1459.58 46.3642 1466.44 47.0612C1474.91 47.9222 1475.59 48.1702 1479.24 51.7312C1479.24 51.7312 1481.27 54.4291 1483.09 55.4922C1485.31 56.7932 1489.5 57.0002 1489.5 57.0002L1495.79 55.8202C1517.54 56.3802 1520.34 56.3542 1526.17 55.5342C1530.33 54.9482 1533.11 55.1432 1536.67 56.2702C1539.32 57.1132 1545.55 58.7592 1550.5 59.9292L1559.5 62.0552L1564.76 60.0272C1568.73 58.4982 1572.37 58.0002 1579.61 58.0002C1587.8 58.0002 1589.63 57.6892 1592.2 55.8562C1594.97 53.8842 1596.07 53.7582 1605.86 54.2842C1611.71 54.5982 1617.61 55.2722 1618.97 55.7822C1621.01 56.5452 1623.38 55.7612 1632.49 51.3162C1645.95 44.7412 1653.34 43.6432 1664.95 46.4892C1670.88 47.9422 1673.09 48.0582 1677.59 47.1542C1680.59 46.5512 1684.35 46.3212 1685.95 46.6412C1688.44 47.1382 1689.46 46.5972 1692.91 42.9762L1696.95 38.7282L1704.22 39.4362C1708.23 39.8262 1717.15 40.4502 1724.05 40.8232C1735.4 41.4352 1737.23 41.8052 1743.05 44.6742C1752.16 49.1552 1757.14 49.9752 1777 50.2542C1790.9 50.4492 1795.84 50.1482 1801 48.7932C1808.3 46.8762 1821.77 44.2232 1829.88 43.1072C1832.84 42.6992 1835.76 41.6782 1836.38 40.8372C1841.3 34.1242 1860.78 32.5532 1878.5 37.4412C1895.74 42.1982 1900.13 43.2072 1900.77 42.5662"
        stroke="black"
        stroke-width="1"
        vector-effect="non-scaling-stroke"></path>
    </g>
    <defs>
      <clipPath id="clip">
        <rect fill="white" height="66" width="1901"></rect>
      </clipPath>
    </defs>
  </svg>
</div>

<script>
  import { animate } from "animejs";
  import { EVENT_DATE } from "../constants/date";
  import * as LOCATION from "../constants/location";
  import { DESCRIPTION, TITLE } from "../constants/seo";

  const buttons =
    document.querySelectorAll<HTMLButtonElement>("[data-tab-button]");

  // Add event listeners to fire confetti when a button is clicked.
  for (const button of buttons) {
    button.addEventListener("click", () => tearOff(button));
  }

  function tearOff(tab: HTMLButtonElement) {
    animate(tab, {
      opacity: {
        to: 0,
        duration: 0.3,
        ease: "inElastic",
      },
      y: {
        to: 168,
        ease: "inElastic",
        duration: 0.3,
      },
    });

    tab.dataset.tabTrashed = "";

    downloadICS();
  }

  const ICS_LOCATION = `${LOCATION.STREET_ADDRESS}, ${LOCATION.ADDRESS_LOCALITY}, ${LOCATION.POSTAL_CODE}, ${LOCATION.ADRESS_COUNTRY_FULL}`;

  function format(date: Date) {
    // Get year, month, and day
    const year = date.getFullYear();

    // getMonth() returns 0-11, so add 1 and pad with leading zero if needed
    const month = String(date.getMonth() + 1).padStart(2, "0");

    // getDate() returns the day of month (1-31), pad with leading zero if needed
    const day = String(date.getDate()).padStart(2, "0");

    // Combine into yyyyMMdd format
    return `${year}${month}${day}`;
  }

  function downloadICS() {
    const ICS_DT_PREFIX = format(new Date(EVENT_DATE));

    const icsContent = [
      `BEGIN:VCALENDAR`,
      `VERSION:2.0`,
      `BEGIN:VEVENT`,
      `SUMMARY:${TITLE}`,
      `DTSTART;TZID=Europe/Berlin:${`${ICS_DT_PREFIX}T120000`}`,
      `DTEND;TZID=Europe/Berlin:${`${ICS_DT_PREFIX}T170000`}`,
      `LOCATION:${ICS_LOCATION}`,
      `DESCRIPTION:${DESCRIPTION}`,
      `END:VEVENT`,
      `END:VCALENDAR`,
    ].join("\n");

    const blob = new Blob([icsContent], { type: "text/calendar" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = `BERLIN_SWAPFEST_${ICS_DT_PREFIX}.ics`;
    document.body.append(link);
    link.click();
    link.remove();
  }
</script>
