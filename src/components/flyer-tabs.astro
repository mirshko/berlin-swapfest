---
/* eslint-disable astro/no-unused-css-selector */

import { Image } from "astro:assets";
import { format } from "date-fns";
import tear from "../assets/tear-outline.png";
import { EVENT_DATE } from "../constants/date";
import * as LOCATION from "../constants/location";

const TAB_DATE = `${format(EVENT_DATE, "MMM do")} @ ${LOCATION.NAME}`;
---

<div class="tabs">
  {
    Array.from({ length: 16 }).map((_, index) => {
      let breakpoint = "sm";
      if (index + 1 > 8) {
        breakpoint = "lg";
      } else if (index + 1 > 6) {
        breakpoint = "md";
      }

      return (
        <div class="tab" data-breakpoint={breakpoint} data-tab-button>
          <span class="tab-inner">
            <span class="tab-text">
              <span>BERLIN SWAPFEST</span>
              <span>{TAB_DATE}</span>
            </span>
          </span>
        </div>
      );
    })
  }

  <Image
    alt=""
    class="absolute inset-0 -z-1 w-full object-contain select-none"
    draggable={false}
    src={tear}
  />
</div>

<style>
  .tabs {
    --cols: 6;
    display: grid;
    grid-template-columns: repeat(
      var(--cols),
      minmax(0, calc(100vw / var(--cols)))
    );
    justify-content: center;
    margin-bottom: 0;
    padding: 0;
    width: 100%;
    position: relative;
  }

  @media (min-width: 48rem) {
    .tabs {
      --cols: 8;
    }
  }

  @media (min-width: 80rem) {
    .tabs {
      --cols: 16;
    }
  }

  .tab {
    --border-style: solid;
    --border-width: 1px;

    background: var(--color-white);
    border-left: var(--border-width) var(--border-style) transparent;
    /* border-top: var(--border-width) var(--border-style) var(--color-black); */
    border-right: var(--border-width) var(--border-style) var(--color-black);
    border-bottom: var(--border-width) var(--border-style) var(--color-black);
    padding: 10px;
    cursor: pointer;
    text-align: center;
    transition:
      transform 1s,
      opacity 1s;
    margin: 0;
    position: relative;
    opacity: 1;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .tab:first-child {
    border-left: var(--border-width) var(--border-style) var(--color-black);
  }

  .tab[data-tab-trashed] {
    pointer-events: none;
  }
  .tab[data-tab-trashed] + .tab {
    border-left: var(--border-width) var(--border-style) var(--color-black);
  }

  .tab[data-breakpoint="sm"] {
    display: flex;
  }

  .tab[data-breakpoint="md"],
  .tab[data-breakpoint="lg"] {
    display: none;
  }

  @media (min-width: 48rem) {
    .tab[data-breakpoint="md"] {
      display: flex;
    }
  }

  @media (min-width: 80rem) {
    .tab[data-breakpoint="lg"] {
      display: flex;
    }
  }

  .tab-inner {
    width: 50px;
    height: 168px;
  }

  .tab-text {
    transform: rotate(90deg);
    text-align: center;
    white-space: nowrap;
    display: flex;
    flex-direction: column;
  }
</style>

<script>
  import { animate } from "animejs";
  import { EVENT_DATE } from "../constants/date";
  import * as LOCATION from "../constants/location";
  import { DESCRIPTION, TITLE } from "../constants/seo";

  const buttons =
    document.querySelectorAll<HTMLButtonElement>("[data-tab-button]");

  // Add event listeners to fire confetti when a button is clicked.
  for (const button of buttons) {
    button.addEventListener("click", () => tearOff(button));
  }

  function tearOff(tab: HTMLButtonElement) {
    animate(tab, {
      opacity: {
        to: 0,
        duration: 0.3,
        ease: "inElastic",
      },
      y: {
        to: 168,
        ease: "inElastic",
        duration: 0.3,
      },
    });

    tab.dataset.tabTrashed = "";

    downloadICS();
  }

  const ICS_LOCATION = `${LOCATION.STREET_ADDRESS}, ${LOCATION.ADDRESS_LOCALITY}, ${LOCATION.POSTAL_CODE}, ${LOCATION.ADRESS_COUNTRY_FULL}`;

  function format(date: Date) {
    // Get year, month, and day
    const year = date.getFullYear();

    // getMonth() returns 0-11, so add 1 and pad with leading zero if needed
    const month = String(date.getMonth() + 1).padStart(2, "0");

    // getDate() returns the day of month (1-31), pad with leading zero if needed
    const day = String(date.getDate()).padStart(2, "0");

    // Combine into yyyyMMdd format
    return `${year}${month}${day}`;
  }

  function downloadICS() {
    const ICS_DT_PREFIX = format(new Date(EVENT_DATE));

    const icsContent = [
      `BEGIN:VCALENDAR`,
      `VERSION:2.0`,
      `BEGIN:VEVENT`,
      `SUMMARY:${TITLE}`,
      `DTSTART;TZID=Europe/Berlin:${`${ICS_DT_PREFIX}T120000`}`,
      `DTEND;TZID=Europe/Berlin:${`${ICS_DT_PREFIX}T170000`}`,
      `LOCATION:${ICS_LOCATION}`,
      `DESCRIPTION:${DESCRIPTION}`,
      `END:VEVENT`,
      `END:VCALENDAR`,
    ].join("\n");

    const blob = new Blob([icsContent], { type: "text/calendar" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = `BERLIN_SWAPFEST_${ICS_DT_PREFIX}.ics`;
    document.body.append(link);
    link.click();
    link.remove();
  }
</script>
