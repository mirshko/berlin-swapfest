---
import { FATHOM_SITE } from "astro:env/client";

// eslint-disable-next-line unicorn/prevent-abbreviations, @typescript-eslint/consistent-type-definitions
export type Props = {
 	enabled?: boolean
	site?: string
	honorDnt?: boolean
	auto?: boolean
	canonical?: boolean
	excludedDomains?: string[]
	includedDomains?: string[]
	loadType?: "defer" | "async"
	spa?: "auto" | "history" | "hash"
};

const {
	enabled = import.meta.env.PROD,
	site = FATHOM_SITE,
	honorDnt = false,
	auto = true,
	canonical = true,
	excludedDomains,
	includedDomains,
	loadType = "defer",
	spa = "auto",
} = Astro.props;

if (!site) {
	throw new Error(`[astro-fathom] "site or the "FATHOM_SITE" environment variable is required`);
}

const source = "https://cdn-eu.usefathom.com/script.js";

const loadProperties = {
	[loadType]: true,
};
---

{
	enabled ? (
		<script
			data-auto={auto}    data-canonical={canonical}    data-excluded-domains={excludedDomains}    data-honor-dnt={honorDnt}    data-included-domains={includedDomains}    data-site={site}    data-spa={spa}    id="fathom-script"    is:inline    src={source}
			{...loadProperties}
		/>
	) : (
		<script is:inline>
			function logger(scope) {
				return function (...arguments_) {
		console.info(`[astro-fathom] ${scope}(${arguments_.join(", ")})`);
				};
			}
			globalThis.fathom = {};
			globalThis.fathom.send = logger("send");
			globalThis.fathom.trackEvent = logger("trackEvent");
			globalThis.fathom.trackGoal = logger("trackGoal");
			globalThis.fathom.trackPageview = logger("trackPageview");
		</script>
	)
}
